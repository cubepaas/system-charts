# Default values for k8s-prometheus-adapter..
affinity: {}

image:
  repository: link-cloud/k8s-prometheus-adapter-amd64
  tag: v0.7.0
  pullPolicy: IfNotPresent

logLevel: 4

metricsRelistInterval: 1m

nodeSelector: {}

priorityClassName: ""

# Url to access prometheus
prometheus:
  url: http://prometheus.default.svc
  port: 9090

replicas: 1

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources: 
  requests:
    cpu: 300m
    memory: 500Mi
  limits:
    cpu: 800m
    memory: 1500Mi

rules:
  default: false
  custom: 
  - seriesQuery: '{namespace!="",pod!=""}'
    seriesFilters: []
    resources:
      overrides:
        namespace:
          resource: namespace
        pod:
          resource: pod
    name:
      matches: (.*)$
      as: ""
    metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
  existing:
  external: []
  resource: []
    # cpu:
    #   containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
    #   nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
    #   resources:
    #     overrides:
    #       instance:
    #         resource: node
    #       namespace:
    #         resource: namespace
    #       pod_name:
    #         resource: pod
    #   containerLabel: container_name
    # memory:
    #   containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
    #   nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
    #   resources:
    #     overrides:
    #       instance:
    #         resource: node
    #       namespace:
    #         resource: namespace
    #       pod_name:
    #         resource: pod
    #   containerLabel: container_name
    # window: 3m

service:
  annotations: {}
  port: 443
  type: ClusterIP

tls:
  enable: false
  ca: |-
    # Public CA file that signed the APIService
  key: |-
    # Private key of the APIService
  certificate: |-
    # Public key of the APIService

# Any extra volumes
extraVolumes: []
  # - name: example-name
  #   hostPath:
  #     path: /path/on/host
  #     type: DirectoryOrCreate
  # - name: ssl-certs
  #   hostPath:
  #     path: /etc/ssl/certs/ca-bundle.crt
  #     type: File

# Any extra volume mounts
extraVolumeMounts: []
  #   - name: example-name
  #     mountPath: /path/in/container
  #   - name: ssl-certs
  #     mountPath: /etc/ssl/certs/ca-certificates.crt
  #     readOnly: true

tolerations: []

# Annotations added to the pod
podAnnotations: {}
